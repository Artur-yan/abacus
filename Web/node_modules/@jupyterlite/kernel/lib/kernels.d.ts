import { Kernel } from '@jupyterlab/services';
import { IKernels, IKernelSpecs } from './tokens';
/**
 * A class to handle requests to /api/kernels
 */
export declare class Kernels implements IKernels {
    /**
     * Construct a new Kernels
     *
     * @param options The instantiation options
     */
    constructor(options: Kernels.IOptions);
    /**
     * Start a new kernel.
     *
     * @param options The kernel start options.
     */
    startNew(options: Kernels.IKernelOptions): Promise<Kernel.IModel>;
    /**
     * Restart a kernel.
     *
     * @param kernelId The kernel id.
     */
    restart(kernelId: string): Promise<Kernel.IModel>;
    /**
     * Shut down a kernel.
     *
     * @param id The kernel id.
     */
    shutdown(id: string): Promise<void>;
    private _kernels;
    private _clients;
    private _kernelClients;
    private _kernelspecs;
}
/**
 * A namespace for Kernels statics.
 */
export declare namespace Kernels {
    /**
     * Options to create a new Kernels.
     */
    interface IOptions {
        /**
         * The kernel specs service.
         */
        kernelspecs: IKernelSpecs;
    }
    /**
     * Options to start a new kernel.
     */
    interface IKernelOptions {
        /**
         * The kernel id.
         */
        id: string;
        /**
         * The kernel name.
         */
        name: string;
        /**
         * The location in the virtual filesystem from which the kernel was started.
         */
        location: string;
    }
    /**
     * The base url for the Kernels manager
     */
    const WS_BASE_URL: string;
}
